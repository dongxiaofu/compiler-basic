!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AstNodePtr	./include/lex.h	/^} *AstNodePtr;$/;"	t	typeref:struct:astNode
AstStmtNodePtr	./include/stmt.h	/^} *AstStmtNodePtr;$/;"	t	typeref:struct:astStmtNode
CC	./Makefile	/^CC          = gcc$/;"	m
CFLAGS	./Makefile	/^CFLAGS	= -I .\/include -g -m32$/;"	m
DECL_H	./include/decl.h	2;"	d
EXPECT	./include/lex.h	56;"	d
EXPR_H	./include/expr.h	2;"	d
H_SRC	./Makefile	/^H_SRC			= lex.h stmt.h$/;"	m
LD	./Makefile	/^LD	=	ld$/;"	m
LDFLAGS	./Makefile	/^LDFLAGS		= -m elf_i386$/;"	m
LEX_H	./include/lex.h	2;"	d
MAX_NAME_LEN	./include/lex.h	10;"	d
NEXT_TOKEN	./include/lex.h	55;"	d
OBJS	./Makefile	/^OBJS	= stmt.o lex.o expr.o decl.o$/;"	m
SCANNER	./Makefile	/^SCANNER = lex$/;"	m
STMT_H	./include/stmt.h	2;"	d
TOKEN	./include/lex.h	18;"	d
TOKEN	./include/lex.h	20;"	d
TOKEN	./include/lex.h	24;"	d
TOKEN	./include/lex.h	26;"	d
T_SRC	./Makefile	/^T_SRC			= tokens.txt$/;"	m
Token	./include/lex.h	/^}Token;$/;"	t	typeref:struct:__anon4
TokenInfo	./include/lex.h	/^}TokenInfo;$/;"	t	typeref:struct:__anon3
TokenKind	./include/lex.h	/^}TokenKind;$/;"	t	typeref:enum:__anon2
Value	./include/lex.h	/^}Value;$/;"	t	typeref:union:__anon1
add_expr	./expr.c	/^AstNodePtr add_expr()$/;"	f
astNode	./include/lex.h	/^typedef struct astNode{$/;"	s
astStmtNode	./include/stmt.h	/^typedef struct astStmtNode{$/;"	s
check_is_prefix_of_stmt	./stmt.c	/^int check_is_prefix_of_stmt(TokenKind kind)$/;"	f
compound_stmt	./stmt.c	/^AstStmtNodePtr compound_stmt()$/;"	f
create_ast_node	./expr.c	/^AstNodePtr create_ast_node(TokenKind op, Value value, AstNodePtr left, AstNodePtr right)$/;"	f
create_ast_stmt_node	./stmt.c	/^AstStmtNodePtr create_ast_stmt_node(TokenKind op)$/;"	f
current_char	./include/lex.h	/^static char current_char = -1;$/;"	v
current_token	./include/lex.h	/^Token current_token;$/;"	v
declaration	./decl.c	/^AstNodePtr declaration(){$/;"	f
declarator	./decl.c	/^AstNodePtr declarator(){$/;"	f
default_stmt	./stmt.c	/^void default_stmt()$/;"	f
direct_declarator	./decl.c	/^AstNodePtr direct_declarator(){$/;"	f
dump_token	./lex.c	/^void dump_token(Token token)$/;"	f
else_stmt	./include/stmt.h	/^	struct astStmtNode *else_stmt;$/;"	m	struct:astStmtNode	typeref:struct:astStmtNode::astStmtNode
expect_token	./lex.c	/^void expect_token(TokenKind kind)$/;"	f
expr	./include/stmt.h	/^	struct astNode *expr;$/;"	m	struct:astStmtNode	typeref:struct:astStmtNode::astNode
expr_stmt	./stmt.c	/^AstStmtNodePtr expr_stmt()$/;"	f
expression	./expr.c	/^AstNodePtr expression()$/;"	f
fp	./include/lex.h	/^FILE *fp;$/;"	v
get_keyword_kind	./lex.c	/^int get_keyword_kind(char *keyword)$/;"	f
get_next_char	./lex.c	/^void get_next_char()$/;"	f
get_token	./lex.c	/^Token get_token()$/;"	f
get_token_kind	./lex.c	/^int get_token_kind(char *token_name)$/;"	f
get_token_name	./lex.c	/^void get_token_name(char *token_name, TokenKind kind){$/;"	f
if_stmt	./stmt.c	/^AstStmtNodePtr if_stmt()$/;"	f
is_arithmetic_node	./expr.c	/^int is_arithmetic_node(AstNodePtr node)$/;"	f
is_whitespace	./lex.c	/^int is_whitespace(char ch)$/;"	f
keywords	./include/lex.h	/^static TokenInfo keywords[] = {$/;"	v
kids	./include/lex.h	/^	struct astNode *kids[2];$/;"	m	struct:astNode	typeref:struct:astNode::astNode
kids	./include/stmt.h	/^	struct astNode *kids[2];$/;"	m	struct:astStmtNode	typeref:struct:astStmtNode::astNode
kind	./include/lex.h	/^	TokenKind kind;$/;"	m	struct:__anon3
kind	./include/lex.h	/^	TokenKind kind;$/;"	m	struct:__anon4
main	./stmt.c	/^int main(int argc, char *argv[])$/;"	f
mul_expr	./expr.c	/^AstNodePtr mul_expr()$/;"	f
name	./include/lex.h	/^	char name[MAX_NAME_LEN];$/;"	m	struct:__anon3
new_label	./stmt.c	/^int new_label()$/;"	f
new_label_node	./stmt.c	/^AstNodePtr new_label_node()$/;"	f
next	./include/stmt.h	/^	struct astStmtNode *next;$/;"	m	struct:astStmtNode	typeref:struct:astStmtNode::astStmtNode
op	./include/lex.h	/^	TokenKind op;$/;"	m	struct:astNode
op	./include/stmt.h	/^	TokenKind op;$/;"	m	struct:astStmtNode
postfix_declarator	./decl.c	/^AstNodePtr postfix_declarator(){$/;"	f
prefix_of_stmt_token_kinds	./include/lex.h	/^static TokenKind prefix_of_stmt_token_kinds[] = {$/;"	v
primary_expr	./expr.c	/^AstNodePtr primary_expr()$/;"	f
print_token	./expr.c	/^void print_token(AstNodePtr node)$/;"	f
stmt	./stmt.c	/^AstStmtNodePtr stmt()$/;"	f
then_stmt	./include/stmt.h	/^	struct astStmtNode *then_stmt;$/;"	m	struct:astStmtNode	typeref:struct:astStmtNode::astStmtNode
token_names	./include/lex.h	/^static char *token_names[] = {$/;"	v
value	./include/lex.h	/^	Value value;$/;"	m	struct:__anon4
value	./include/lex.h	/^	Value value;$/;"	m	struct:astNode
value	./include/stmt.h	/^	Value value;$/;"	m	struct:astStmtNode
value_num	./include/lex.h	/^	int value_num;$/;"	m	union:__anon1
value_str	./include/lex.h	/^	char value_str[MAX_NAME_LEN];$/;"	m	union:__anon1
visit_arithmetic_node	./expr.c	/^void visit_arithmetic_node(AstNodePtr pNode)$/;"	f
visit_declaration	./decl.c	/^void visit_declaration(AstNodePtr pNode){$/;"	f
visit_stmt_node	./stmt.c	/^void visit_stmt_node(AstStmtNodePtr stmt){$/;"	f
while_stmt	./stmt.c	/^AstStmtNodePtr while_stmt()$/;"	f
